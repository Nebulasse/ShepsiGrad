const { Pool } = require('pg');
const dotenv = require('dotenv');
// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();
// –¢–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ—Ç .env —Ñ–∞–π–ª–∞)
const testConfig = {
    host: 'localhost',
    port: 5432,
    user: 'postgres',
    password: 'postgres',
    database: 'shepsigrad_test'
};
// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ
const connectionConfig = {
    host: process.env.DB_HOST || testConfig.host,
    port: parseInt(process.env.DB_PORT || testConfig.port, 10),
    user: process.env.DB_USERNAME || testConfig.user,
    password: process.env.DB_PASSWORD || testConfig.password,
    database: process.env.DB_NAME || testConfig.database,
    ssl: process.env.DB_SSL === 'true' ? {
        rejectUnauthorized: false
    } : undefined
};
// –í—ã–≤–æ–¥–∏–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
console.log(`- –•–æ—Å—Ç: ${connectionConfig.host}`);
console.log(`- –ü–æ—Ä—Ç: ${connectionConfig.port}`);
console.log(`- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${connectionConfig.user}`);
console.log(`- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${connectionConfig.database}`);
console.log(`- SSL: ${process.env.DB_SSL === 'true' ? '–î–∞' : '–ù–µ—Ç'}`);
// –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
const pool = new Pool(connectionConfig);
async function testConnection() {
    console.log('\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...');
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        const client = await pool.connect();
        console.log('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é PostgreSQL
        const versionRes = await client.query('SELECT version()');
        console.log(`üìä –í–µ—Ä—Å–∏—è PostgreSQL: ${versionRes.rows[0].version}`);
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
        const tablesRes = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      ORDER BY table_name
    `);
        console.log(`\nüìã –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: ${tablesRes.rows.length}`);
        if (tablesRes.rows.length > 0) {
            console.log('–°–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü:');
            tablesRes.rows.forEach((row, index) => {
                console.log(`${index + 1}. ${row.table_name}`);
            });
            // –î–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤—ã–≤–æ–¥–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            console.log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü:');
            for (const row of tablesRes.rows) {
                try {
                    const countRes = await client.query(`SELECT COUNT(*) FROM "${row.table_name}"`);
                    console.log(`- ${row.table_name}: ${countRes.rows[0].count} –∑–∞–ø–∏—Å–µ–π`);
                }
                catch (err) {
                    console.log(`- ${row.table_name}: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞–ø–∏—Å–µ–π - ${err.message}`);
                }
            }
        }
        else {
            console.log('\n‚ö†Ô∏è –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–∞–±–ª–∏—Ü. –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏.');
        }
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        client.release();
    }
    catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
        console.error('–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:', err);
        if (err.code === 'ECONNREFUSED') {
            console.error('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä PostgreSQL –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É –∏ –ø–æ—Ä—Ç—É');
            console.error(`–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –≤—Ä—É—á–Ω—É—é: psql -h ${connectionConfig.host} -p ${connectionConfig.port} -U ${connectionConfig.user} -d ${connectionConfig.database}`);
        }
        else if (err.code === '28P01') {
            console.error('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å');
        }
        else if (err.code === '3D000') {
            console.error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—ë –∫–æ–º–∞–Ω–¥–æ–π:');
            console.error(`CREATE DATABASE ${connectionConfig.database};`);
        }
    }
    finally {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        await pool.end();
    }
}
// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testConnection();
