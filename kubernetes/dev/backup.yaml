apiVersion: v1
kind: Namespace
metadata:
  name: backup
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: backup-config
  namespace: backup
data:
  backup-script.sh: |
    #!/bin/bash
    
    # Переменные
    BACKUP_DATE=$(date +%Y-%m-%d-%H%M)
    BACKUP_DIR="/backups"
    DB_BACKUP="$BACKUP_DIR/db-$BACKUP_DATE.sql"
    STORAGE_BACKUP="$BACKUP_DIR/storage-$BACKUP_DATE.tar.gz"
    
    echo "Начало резервного копирования: $(date)"
    
    # Создаем директорию для бэкапов, если она не существует
    mkdir -p $BACKUP_DIR
    
    # Бэкап базы данных
    echo "Создание бэкапа базы данных..."
    pg_dump -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME -F c -f $DB_BACKUP
    if [ $? -eq 0 ]; then
      echo "Бэкап базы данных успешно создан: $DB_BACKUP"
    else
      echo "Ошибка при создании бэкапа базы данных"
      exit 1
    fi
    
    # Бэкап хранилища (MinIO)
    echo "Создание бэкапа хранилища..."
    mc alias set minio http://$MINIO_HOST:$MINIO_PORT $MINIO_ACCESS_KEY $MINIO_SECRET_KEY
    mc mirror --overwrite minio/shepsigrad-uploads $BACKUP_DIR/uploads
    tar -czf $STORAGE_BACKUP -C $BACKUP_DIR uploads
    rm -rf $BACKUP_DIR/uploads
    
    if [ $? -eq 0 ]; then
      echo "Бэкап хранилища успешно создан: $STORAGE_BACKUP"
    else
      echo "Ошибка при создании бэкапа хранилища"
      exit 1
    fi
    
    # Удаление старых бэкапов (оставляем только последние 7)
    echo "Удаление старых бэкапов..."
    ls -t $BACKUP_DIR/db-*.sql | tail -n +8 | xargs -r rm
    ls -t $BACKUP_DIR/storage-*.tar.gz | tail -n +8 | xargs -r rm
    
    echo "Резервное копирование завершено: $(date)"
---
apiVersion: v1
kind: Secret
metadata:
  name: backup-credentials
  namespace: backup
type: Opaque
data:
  db-password: cG9zdGdyZXM=  # postgres
  minio-access-key: bWluaW9hZG1pbg==  # minioadmin
  minio-secret-key: bWluaW9hZG1pbjEyMw==  # minioadmin123
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backup-pvc
  namespace: backup
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: database-backup
  namespace: backup
spec:
  schedule: "0 2 * * *"  # Каждый день в 2:00
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup
            image: postgres:14
            command:
            - /bin/bash
            - -c
            - /scripts/backup-script.sh
            env:
            - name: DB_HOST
              value: "postgres.database"
            - name: DB_PORT
              value: "5432"
            - name: DB_USER
              value: "postgres"
            - name: DB_NAME
              value: "shepsigrad"
            - name: MINIO_HOST
              value: "minio.storage"
            - name: MINIO_PORT
              value: "9000"
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: backup-credentials
                  key: db-password
            - name: MINIO_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: backup-credentials
                  key: minio-access-key
            - name: MINIO_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: backup-credentials
                  key: minio-secret-key
            volumeMounts:
            - name: backup-volume
              mountPath: /backups
            - name: scripts
              mountPath: /scripts
          volumes:
          - name: backup-volume
            persistentVolumeClaim:
              claimName: backup-pvc
          - name: scripts
            configMap:
              name: backup-config
              defaultMode: 0755
          restartPolicy: OnFailure
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backup-monitor
  namespace: backup
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backup-monitor
  template:
    metadata:
      labels:
        app: backup-monitor
    spec:
      containers:
      - name: backup-monitor
        image: alpine:3.16
        command:
        - /bin/sh
        - -c
        - |
          apk add --no-cache curl jq
          while true; do
            # Проверка размера директории с бэкапами
            BACKUP_SIZE=$(du -sh /backups | cut -f1)
            echo "Текущий размер бэкапов: $BACKUP_SIZE"
            
            # Проверка последнего бэкапа
            LATEST_BACKUP=$(ls -t /backups/db-*.sql | head -1)
            if [ -n "$LATEST_BACKUP" ]; then
              LAST_BACKUP_TIME=$(stat -c %y "$LATEST_BACKUP")
              echo "Последний бэкап базы данных: $LAST_BACKUP_TIME"
            else
              echo "Бэкапы базы данных не найдены!"
            fi
            
            sleep 3600  # Проверка каждый час
          done
        volumeMounts:
        - name: backup-volume
          mountPath: /backups
      volumes:
      - name: backup-volume
        persistentVolumeClaim:
          claimName: backup-pvc 